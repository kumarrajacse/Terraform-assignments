Create a file called main.tf.
Create a docker image resource and call it nginx_image.
Set the name of the image to nginx:latest.
Save and exit the file.

Initialize Terraform.
Plan the deploy and output a terraform plan called tf_image_plan.
Apply the plan using tf_image_plan.

==========================================

# vi main.tf
ubuntu@ip-172-31-8-76:~/terraform$ cat main.tf
resource "docker_image" "nginx_image"{
    name= "nginx:latest"
}

=======================================

step1:-

ubuntu@ip-172-31-8-76:~/terraform$ terraform init

Initializing provider plugins...
- Checking for available provider plugins on https://releases.hashicorp.com...
- Downloading plugin for provider "docker" (2.7.1)...

The following providers do not have any version constraints in configuration,
so the latest version was installed.

To prevent automatic upgrades to new major versions that may contain breaking
changes, it is recommended to add version = "..." constraints to the
corresponding provider blocks in configuration, with the constraint strings
suggested below.

* provider.docker: version = "~> 2.7"

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
===========================================================================

step 2:-

ubuntu@ip-172-31-8-76:~/terraform$ terraform plan -out tf_image_plan
Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.


------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  + docker_image.nginx_image
      id:     <computed>
      latest: <computed>
      name:   "nginx:latest"


Plan: 1 to add, 0 to change, 0 to destroy.

------------------------------------------------------------------------

This plan was saved to: tf_image_plan

To perform exactly these actions, run the following command to apply:
    terraform apply "tf_image_plan"
==================================================================

step 3:-

ubuntu@ip-172-31-8-76:~/terraform$ terraform apply "tf_image_plan"
docker_image.nginx_image: Creating...
  latest: "" => "<computed>"
  name:   "" => "nginx:latest"
docker_image.nginx_image: Creation complete after 6s (ID: sha256:2622e6cca7ebbb6e310743abce3fc473...79171b9d76ba9d4f446ce7b163nginx:latest)

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.
=====================================================================

verification:-

ubuntu@ip-172-31-8-76:~/terraform$ ls -la
total 28
drwxrwxr-x 3 ubuntu ubuntu 4096 Sep 1 13:29 .
drwxr-xr-x 8 ubuntu ubuntu 4096 Sep 1 13:29 ..
drwxrwxr-x 3 ubuntu ubuntu 4096 Sep 1 13:26 .terraform
-rw-rw-r-- 1 ubuntu ubuntu   66 Sep 1 13:29 main.tf
-rw-rw-r-- 1 ubuntu ubuntu 1164 Sep 1 13:29 terraform.tfstate
-rw-rw-r-- 1 ubuntu ubuntu  318 Sep 1 13:29 terraform.tfstate.backup
-rw-rw-r-- 1 ubuntu ubuntu 3411 Sep 1 13:27 tf_image_plan
=================================================================

ubuntu@ip-172-31-8-76:~/terraform$ docker image ls
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
nginx               latest              2622e6cca7eb        1 days ago          132MB