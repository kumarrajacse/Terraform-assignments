Create the variables file (variables.tf) and add four variables with these default values:
	1. container_name: mysql.
	2. mysql_root_password: P4sSw0rd0!.
	3. mysql_network_name: mysql_internal_network.
	4. mysql_volume_name: mysql_data.

Create the images file (images.tf)
	1. Add the docker_image resource and call it mysql_image.
	2. Set the name to mysql:5.7.

Create the networks file (networks.tf):-
	1. Add the docker_network resource and call it private_bridge_network.
	2. Set the name to use the mysql_network_name variable.
	3. Set the driver to bridge.
	4. Set internal to true.

Create the volumes file (volume.tf):-
	1. In volumes.tf add the docker_volume resource and call it mysql_data_volume.
	2. Set the name to use the mysql_volume_name variable.

Create the main file (main.tf):-
	1. In main.tf add the docker_container resource and call it mysql_container.
	2. Set the name to use the container_name variable.
	3. Set the image to use the name of the image coming from docker_image.
	4. Create an environment variable for MYSQL_ROOT_PASSWORD and set it to the mysql_root_password variable.
	5. Configure the container volume to use the volume created by docker_volume, and make sure the container_path is set to /var/lib/mysql.
	7. The container needs to use the network created by docker_network.

Deploy the infrastructure
	1. Initialize Terraform.
	2. Validate the files.
	3. Generate a Terraform plan.
	4. Deploy the infrastructure using the plan file.
==========================================================
#image.tf

resource "docker_image" "mysql"{
    name = "mysql:5.7"
}

# main.tf
resource "docker_container" "docker_container"{
    name = var.container_name
    image = docker_image.mysql.name
    env = [
        "MYSQL_ROOT_PASSWORD = ${var.mysql_root_password}"
    ]
    volumes {
         volume_name = docker_volume.mysql_data_volume.name
         container_path = "/var/lib/mysql"
    }
   networks_advanced {
       name =docker_network.private_bridge_network.name
    }
}

# network.tf
resource "docker_network" "private_bridge_network"{
    name = var.mysql_network_name
    driver = "bridge"
    internal = "true"
}
#volume.tf
resource "docker_volume" "mysql_data_volume"{
    name = var.mysql_volume_name
}
# variable.tf
variable "container_name" {
    type        = string
    description = "container name"
    default     =  "mysql"
}

variable "mysql_network_name" {
    type        = string
    description = "(optional) describe your variable"
    default     = "mysql_internal_network"
}

variable "mysql_volume_name" {
    type        = string
    description = "(optional) describe your variable"
    default     = "mysql_data"
}

variable "mysql_root_password" {
    description = "(optional) describe your variable"
    default     = "cDRzU1dvUmQwIQo="
}

===============================================================================


ubuntu@ip-172-31-8-76:~/terraform/assignment4$ terraform init

Initializing the backend...

Initializing provider plugins...
- Checking for available provider plugins...
- Downloading plugin for provider "docker" (terraform-providers/docker) 2.7.1...

The following providers do not have any version constraints in configuration,
so the latest version was installed.

To prevent automatic upgrades to new major versions that may contain breaking
changes, it is recommended to add version = "..." constraints to the
corresponding provider blocks in configuration, with the constraint strings
suggested below.

* provider.docker: version = "~> 2.7"

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
===============================================================================

ubuntu@ip-172-31-8-76:~/terraform/assignment4$ terraform validate .
Success! The configuration is valid.
===============================================================================
ubuntu@ip-172-31-8-76:~/terraform/assignment4$ terraform apply tfsql_plan
docker_network.private_bridge_network: Creating...
docker_network.private_bridge_network: Creation complete after 2s [id=9516b79ed8170e25db1fc3cc677a6b3e60c8bcd24315e60862234c56cdacfd4c]
docker_container.docker_container: Creating...
docker_container.docker_container: Creation complete after 1s [id=55e3ec17df7f7945d5d195f0fdd04d56654cce48610e8e385df7ead7036fe85b]

Apply complete! Resources: 2 added, 0 changed, 0 destroyed.

The state of your infrastructure has been saved to the path
below. This state is required to modify and destroy your
infrastructure, so keep it safe. To inspect the complete state
use the `terraform show` command.

State path: terraform.tfstate
==================================================

ubuntu@ip-172-31-8-76:~/terraform/assignment4$ docker volume ls|grep mysql
local               mysql_data

ubuntu@ip-172-31-8-76:~/terraform/assignment4$ docker network ls|grep mysql
2d87b2dc703f        mysql_internal_network   bridge              local

ubuntu@ip-172-31-8-76:~/terraform/assignment4$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS               NAMES
e0f72f56ca0d        mysql:5.7           "docker-entrypoint.s…"   About a minute ago   Up 55 seconds                           mysql

ubuntu@ip-172-31-8-76:~/terraform/assignment4$ sudo ls -l /var/lib/docker/volumes/mysql_data
total 4
drwxr-xr-x 2 999 docker 4096 Jun 20 13:00 _data



